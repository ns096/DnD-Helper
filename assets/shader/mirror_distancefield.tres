[gd_resource type="VisualShader" load_steps=40 format=2]

[ext_resource path="res://assets/UI/shader textures/fancy_distance_field2.png" type="Texture" id=1]
[ext_resource path="res://assets/UI/shader textures/RGB squiggle 2.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=2]
function = 0

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=3]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.9, 2, 0.0 ]

[sub_resource type="VisualShaderNodeInput" id=4]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=5]
output_port_for_preview = 0
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=6]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeIf" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-07, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeIf" id=9]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-07, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0.786296, 0.164594, 0.474838, 1 )

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=13]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 0.0, 1, 0.1 ]

[sub_resource type="VisualShaderNodeScalarOp" id=15]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=16]

[sub_resource type="VisualShaderNodeScalarFunc" id=17]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeColorConstant" id=19]
constant = Color( 0.0502292, 0.524207, 0.808594, 1 )

[sub_resource type="VisualShaderNodeScalarClamp" id=20]

[sub_resource type="VisualShaderNodeScalarFunc" id=21]
function = 12

[sub_resource type="VisualShaderNodeVectorScalarMix" id=22]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=23]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=24]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeInput" id=25]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=26]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=27]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeIf" id=28]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-07, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=29]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 2.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=31]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeIf" id=32]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 1e-07, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=33]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=34]
default_input_values = [ 0, 2.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarSmoothStep" id=35]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.9, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=36]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeColorConstant" id=37]

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D tex_frg_3;



void vertex() {
// Color:2
	vec3 n_out2p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out2p1 = 1.000000;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void fragment() {
// Color:4
	vec3 n_out4p0 = vec3(0.786296, 0.164594, 0.474838);
	float n_out4p1 = 1.000000;

// Color:48
	vec3 n_out48p0 = vec3(0.050229, 0.524207, 0.808594);
	float n_out48p1 = 1.000000;

// Input:63
	vec3 n_out63p0 = vec3(UV, 0.0);

// VectorDecompose:62
	float n_out62p0 = n_out63p0.x;
	float n_out62p1 = n_out63p0.y;
	float n_out62p2 = n_out63p0.z;

// ScalarOp:71
	float n_in71p1 = 2.00000;
	float n_out71p0 = n_out62p0 * n_in71p1;

// ScalarOp:72
	float n_in72p0 = 2.00000;
	float n_out72p0 = n_in72p0 - n_out71p0;

// If:66
	float n_in66p1 = 0.50000;
	float n_in66p2 = 0.00000;
	vec3 n_in66p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out66p0;
	if(abs(n_out62p0 - n_in66p1) < n_in66p2)
	{
		n_out66p0 = n_in66p3;
	}
	else if(n_out62p0 < n_in66p1)
	{
		n_out66p0 = vec3(n_out71p0);
	}
	else
	{
		n_out66p0 = vec3(n_out72p0);
	}

// ScalarOp:75
	float n_in75p1 = 2.00000;
	float n_out75p0 = n_out62p1 * n_in75p1;

// ScalarOp:76
	float n_in76p0 = 2.00000;
	float n_out76p0 = n_in76p0 - n_out75p0;

// If:74
	float n_in74p1 = 0.50000;
	float n_in74p2 = 0.00000;
	vec3 n_in74p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out74p0;
	if(abs(n_out62p1 - n_in74p1) < n_in74p2)
	{
		n_out74p0 = n_in74p3;
	}
	else if(n_out62p1 < n_in74p1)
	{
		n_out74p0 = vec3(n_out75p0);
	}
	else
	{
		n_out74p0 = vec3(n_out76p0);
	}

// VectorCompose:73
	float n_in73p2 = 0.00000;
	vec3 n_out73p0 = vec3(dot(n_out66p0, vec3(0.333333, 0.333333, 0.333333)), dot(n_out74p0, vec3(0.333333, 0.333333, 0.333333)), n_in73p2);

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, n_out73p0.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorDecompose:65
	float n_out65p0 = n_out3p0.x;
	float n_out65p1 = n_out3p0.y;
	float n_out65p2 = n_out3p0.z;

// Input:10
	float n_out10p0 = TIME;

// ScalarOp:61
	float n_in61p1 = 0.50000;
	float n_out61p0 = n_out10p0 * n_in61p1;

// ScalarFunc:11
	float n_out11p0 = sin(n_out61p0);

// ScalarFunc:59
	float n_out59p0 = abs(n_out11p0);

// ScalarClamp:45
	float n_in45p1 = 0.00000;
	float n_in45p2 = 1.00000;
	float n_out45p0 = clamp(n_out59p0, n_in45p1, n_in45p2);

// ScalarSmoothStep:77
	float n_in77p2 = 0.00000;
	float n_out77p0 = smoothstep(n_out65p0, n_out45p0, n_in77p2);

// ScalarSmoothStep:21
	float n_in21p2 = 0.00000;
	float n_out21p0 = smoothstep(n_out65p1, n_out45p0, n_in21p2);

// ScalarOp:78
	float n_out78p0 = n_out77p0 + n_out21p0;

// VectorScalarMix:60
	vec3 n_out60p0 = mix(n_out4p0, n_out48p0, n_out78p0);

// Output:0
	COLOR.rgb = n_out60p0;
	COLOR.a = n_out21p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -188.5, -803 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/vertex/2/node = SubResource( 37 )
nodes/vertex/2/position = Vector2( -14, 261 )
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 2, 2, 1, 0, 3 )
nodes/fragment/0/position = Vector2( 1500, -55 )
nodes/fragment/3/node = SubResource( 5 )
nodes/fragment/3/position = Vector2( -880, -220 )
nodes/fragment/4/node = SubResource( 11 )
nodes/fragment/4/position = Vector2( 540, -500 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -1785, 600 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -1370, 595 )
nodes/fragment/21/node = SubResource( 3 )
nodes/fragment/21/position = Vector2( 40, 120 )
nodes/fragment/22/node = SubResource( 4 )
nodes/fragment/22/position = Vector2( -2000, -1200 )
nodes/fragment/31/node = SubResource( 6 )
nodes/fragment/31/position = Vector2( -1800, -1200 )
nodes/fragment/36/node = SubResource( 7 )
nodes/fragment/36/position = Vector2( -1240, -1200 )
nodes/fragment/37/node = SubResource( 8 )
nodes/fragment/37/position = Vector2( -1440, -1200 )
nodes/fragment/38/node = SubResource( 9 )
nodes/fragment/38/position = Vector2( -1240, -840 )
nodes/fragment/39/node = SubResource( 10 )
nodes/fragment/39/position = Vector2( -1440, -840 )
nodes/fragment/40/node = SubResource( 12 )
nodes/fragment/40/position = Vector2( -800, -960 )
nodes/fragment/41/node = SubResource( 13 )
nodes/fragment/41/position = Vector2( 10, 400 )
nodes/fragment/42/node = SubResource( 14 )
nodes/fragment/42/position = Vector2( -645, 640 )
nodes/fragment/43/node = SubResource( 15 )
nodes/fragment/43/position = Vector2( 580, 165 )
nodes/fragment/45/node = SubResource( 16 )
nodes/fragment/45/position = Vector2( -690, 380 )
nodes/fragment/46/node = SubResource( 17 )
nodes/fragment/46/position = Vector2( -1040, -1200 )
nodes/fragment/47/node = SubResource( 18 )
nodes/fragment/47/position = Vector2( -1040, -840 )
nodes/fragment/48/node = SubResource( 19 )
nodes/fragment/48/position = Vector2( 780, -300 )
nodes/fragment/52/node = SubResource( 20 )
nodes/fragment/52/position = Vector2( -430, 635 )
nodes/fragment/59/node = SubResource( 21 )
nodes/fragment/59/position = Vector2( -935, 600 )
nodes/fragment/60/node = SubResource( 22 )
nodes/fragment/60/position = Vector2( 1120, -220 )
nodes/fragment/61/node = SubResource( 23 )
nodes/fragment/61/position = Vector2( -1555, 555 )
nodes/fragment/62/node = SubResource( 24 )
nodes/fragment/62/position = Vector2( -2300, -220 )
nodes/fragment/63/node = SubResource( 25 )
nodes/fragment/63/position = Vector2( -2480, -200 )
nodes/fragment/64/node = SubResource( 26 )
nodes/fragment/64/position = Vector2( -540, -940 )
nodes/fragment/65/node = SubResource( 27 )
nodes/fragment/65/position = Vector2( -460, -20 )
nodes/fragment/66/node = SubResource( 28 )
nodes/fragment/66/position = Vector2( -1520, -440 )
nodes/fragment/71/node = SubResource( 29 )
nodes/fragment/71/position = Vector2( -1880, -420 )
nodes/fragment/72/node = SubResource( 30 )
nodes/fragment/72/position = Vector2( -1700, -140 )
nodes/fragment/73/node = SubResource( 31 )
nodes/fragment/73/position = Vector2( -1140, -220 )
nodes/fragment/74/node = SubResource( 32 )
nodes/fragment/74/position = Vector2( -1380, 40 )
nodes/fragment/75/node = SubResource( 33 )
nodes/fragment/75/position = Vector2( -1900, 120 )
nodes/fragment/76/node = SubResource( 34 )
nodes/fragment/76/position = Vector2( -1660, 260 )
nodes/fragment/77/node = SubResource( 35 )
nodes/fragment/77/position = Vector2( 80, -240 )
nodes/fragment/78/node = SubResource( 36 )
nodes/fragment/78/position = Vector2( 620, -140 )
nodes/fragment/connections = PoolIntArray( 22, 0, 31, 0, 31, 0, 36, 0, 31, 0, 36, 4, 31, 0, 37, 1, 37, 0, 36, 5, 39, 0, 38, 5, 31, 1, 39, 1, 31, 1, 38, 0, 31, 1, 38, 4, 36, 0, 46, 0, 38, 0, 47, 0, 21, 0, 43, 0, 21, 0, 0, 1, 45, 0, 21, 1, 52, 0, 41, 1, 11, 0, 59, 0, 59, 0, 45, 0, 38, 0, 40, 1, 36, 0, 40, 0, 41, 0, 43, 1, 42, 0, 52, 0, 59, 0, 42, 0, 4, 0, 60, 0, 48, 0, 60, 1, 60, 0, 0, 0, 10, 0, 61, 0, 61, 0, 11, 0, 63, 0, 62, 0, 40, 0, 64, 0, 3, 0, 65, 0, 65, 1, 21, 0, 65, 1, 41, 0, 62, 0, 66, 0, 62, 0, 71, 0, 71, 0, 72, 1, 71, 0, 66, 5, 72, 0, 66, 4, 75, 0, 76, 1, 75, 0, 74, 5, 76, 0, 74, 4, 62, 1, 74, 0, 62, 1, 75, 0, 66, 0, 73, 0, 74, 0, 73, 1, 73, 0, 3, 0, 65, 0, 77, 0, 45, 0, 77, 1, 77, 0, 78, 0, 21, 0, 78, 1, 78, 0, 60, 2 )
